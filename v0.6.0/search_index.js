var documenterSearchIndex = {"docs":
[{"location":"integrations/ibkr/#ibkr","page":"Interactive Brokers","title":"Interactive Brokers","text":"","category":"section"},{"location":"integrations/about/#Integrations","page":"Integrations","title":"Integrations","text":"","category":"section"},{"location":"integrations/about/","page":"Integrations","title":"Integrations","text":"Available integrations with other packages are mostly implemented through extensions. This allows mapping external package to Lucky types and principles.","category":"page"},{"location":"fills/#fills","page":"Fills","title":"Fills","text":"","category":"section"},{"location":"fills/","page":"Fills","title":"Fills","text":"    Lucky.AbstractFill\n    Lucky.Fill","category":"page"},{"location":"fills/#Lucky.AbstractFill","page":"Fills","title":"Lucky.AbstractFill","text":"AbstractFill\n\nAbstract Type for Fills.\n\n\n\n\n\n","category":"type"},{"location":"fills/#Lucky.Fill","page":"Fills","title":"Lucky.Fill","text":"AbstractFill\n\nStandard fill.\n\n\n\n\n\n","category":"type"},{"location":"indicators/#indicators","page":"Indicators","title":"Indicators","text":"","category":"section"},{"location":"getting-started/#Getting-started","page":"Getting Started","title":"Getting started","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Lucky.jl","category":"page"},{"location":"getting-started/#Installation","page":"Getting Started","title":"Installation","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Install Lucky.jl through the Julia package manager:","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"] add Lucky","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"The package has very light dependencies other than its reactive async core: Rocket.jl.","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Seamless integration with other packages (DataFrames, TimeSeries, Broker APIS, etc.), is done via extensions.","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"# Natively import historical stock price from Yahoo into Lucky.\n] add MarketData","category":"page"},{"location":"getting-started/#Concepts","page":"Getting Started","title":"Concepts","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"A basic trading pipeline looks like this:","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"This is purely conceptual as brokers (such as Alpaca or Interactive Brokers for instance) most likely act as exchanges (where orders get matched) and blotters (where your positions are stored).","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"More interestingly, Lucky allows you to do these wiring in any way you'd like with as many steps as you'd like and different time frames all at once.","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"As a picture, consider that you'd like to have 3 strategies, with each being dedicated to adjusting the final decision to manage orders. ","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Strategy one provides risk signals.\nNext Strategy manages allocation targets. \nFinal Strategy handles order execution.","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Which means that such a design requires lots of wiring as strategy 2 needs to know your current position, while 3 will likey need to track the fills and positions.","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Whatever you wish to build, the concepts remain where:","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Operators transform data.\nStrategies make decisions.\nExchanges match orders.\nBlotters do the record keeping.","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"To do all this, Lucky leverages the Rocket library under the hood, allowing fast reactive processing.","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Familiarity with reactive programming concepts helps (though not required). You can refer to Rocket's documentation for more information here.","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"That's all we need to know for now.","category":"page"},{"location":"units/units/#units","page":"About","title":"Units","text":"","category":"section"},{"location":"units/units/","page":"About","title":"About","text":"    Lucky.Unit","category":"page"},{"location":"units/units/#Lucky.Unit","page":"About","title":"Lucky.Unit","text":"Unit\n\nAbstract Unit type.\n\nA Unit describes a quantity.\n\nExamples\n\n1 USD\n1 OUNCE\n1 LOT\n1 BARREL\n\nSee also: Currency\n\n\n\n\n\n","category":"type"},{"location":"datatypes/#datatypes","page":"About","title":"Data Types","text":"","category":"section"},{"location":"datatypes/","page":"About","title":"About","text":"Lucky offers a deept integration of data types and Julia practices around it. While you can use many parts with the Julia native types, the library presents data types inherent to financial instruments and operations.","category":"page"},{"location":"datatypes/","page":"About","title":"About","text":"These types present common interfaces to transfer types and values.","category":"page"},{"location":"datatypes/#Common-Interfaces","page":"About","title":"Common Interfaces","text":"","category":"section"},{"location":"datatypes/","page":"About","title":"About","text":"    Lucky.currency\n    Lucky.timestamp","category":"page"},{"location":"datatypes/#Lucky.currency","page":"About","title":"Lucky.currency","text":"currency\n\nReturns the currency of the object.\n\n\n\n\n\n","category":"function"},{"location":"datatypes/#Lucky.timestamp","page":"About","title":"Lucky.timestamp","text":"timestamp\n\nReturns the timestamp of the object.\n\n\n\n\n\n","category":"function"},{"location":"glossary/#Glossary","page":"Glossary","title":"Glossary","text":"","category":"section"},{"location":"glossary/#Tick","page":"Glossary","title":"Tick","text":"","category":"section"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"A Tick is a new information. A 'trade tick' means you are receiving new information about the trades happening in a market.","category":"page"},{"location":"integrations/#integrations","page":"About","title":"Integrations","text":"","category":"section"},{"location":"integrations/","page":"About","title":"About","text":"Lucky offers seamless integration with numerous third party packages through extensions.","category":"page"},{"location":"integrations/","page":"About","title":"About","text":"Integrated packages share common interfaces.","category":"page"},{"location":"integrations/#Current-Integrations","page":"About","title":"Current Integrations","text":"","category":"section"},{"location":"integrations/","page":"About","title":"About","text":"Service Description Required Library\nFakeExchange Mimicks the behavior of an exchange. Mostly used to backtest trading strategies. None\nInMemoryBlotter Provides a simple Blotter. None\nInteractiveBrokers Integrate InteractiveBokers.com client API InteractiveBrokers\nMarketData Get Historical price series from Yahoo, Fred. MarketData\nRandom Random Random\nTimeSeries A native Julia library providing a DataType to handle Time Series data. Used by MarketData but can be used independently. TimeSeries","category":"page"},{"location":"integrations/#FakeExchange","page":"About","title":"FakeExchange","text":"","category":"section"},{"location":"integrations/","page":"About","title":"About","text":"FakeExchange is part of Lucky. No extra package is required.","category":"page"},{"location":"integrations/","page":"About","title":"About","text":"    using Lucky\n    using Rocket\n    fills = Subject(Fill) # Where the fake exchange will post fills.\n    ex = exchange(:fake, fills)","category":"page"},{"location":"integrations/#InMemoryBlotter","page":"About","title":"InMemoryBlotter","text":"","category":"section"},{"location":"integrations/","page":"About","title":"About","text":"    using Lucky\n    using Rocket\n    positions = Subject(Position) # Where the blotter will post the current positions\n    bl = blotter(:inmemory, positions)","category":"page"},{"location":"integrations/#InteractiveBrokers","page":"About","title":"InteractiveBrokers","text":"","category":"section"},{"location":"integrations/","page":"About","title":"About","text":"Add InteractiveBrokers to your Project.toml file.","category":"page"},{"location":"integrations/","page":"About","title":"About","text":"    using Lucky\n    using Rocket\n    using InteractiveBrokers\n    client = service(:interactivebrokers) # Client holding the connection and settings.\n    \n    InteractiveBrokers.reqMarketDataType(client, InteractiveBrokers.DELAYED) # Specify the data type you wish to stream.\n\n    stock = Stock(:AAPL, :USD)\n\n    qt = trades(client, stock) # Will return a Subject that will stream the trades.\n    subscribe!(qt, logger())\n    # connect(client) # Will start the streams. Requires an alive IBGateway/Workstation.\n    nothing # hide","category":"page"},{"location":"integrations/#MarketData","page":"About","title":"MarketData","text":"","category":"section"},{"location":"integrations/","page":"About","title":"About","text":"Add MarketData to your Project.toml file. Note that the package requires the TimeSeriespackage, so you don't need to add it on your own to get native support for the TimeSeries format.","category":"page"},{"location":"integrations/","page":"About","title":"About","text":"    using Lucky\n    using MarketData\n    using Rocket\n    symbol = :AAPL\n\n    # Define the historical period you wish to retrieve.\n    # today = Dates.now(Dates.UTC)\n    # periodEnd = Dates.firstdayofweek(today)\n    # periodStart = Dates.lastdayofweek(today - Month(1))\n    # opts = MarketData.YahooOpt(period1=periodStart, period2=periodEnd, interval=\"1d\")\n\n    # Get the data\n    # data = MarketData.yahoo(symbol, opts)\n\n    # Or use the static dataset provided by the package (here only last 4 elements)\n    data = getfield(MarketData, symbol)[end-3:end]\n\n    # Create the Instrument\n    stock = Stock(symbol, :USD)\n\n    # Now you have a couple of options\n\n    # Stream the raw data\n    subscribe!(Rocket.from(data), logger())\n\n    # Stream the data as quotes\n    subscribe!(quotes(stock, data), logger())\n    nothing # hide","category":"page"},{"location":"integrations/#Random","page":"About","title":"Random","text":"","category":"section"},{"location":"integrations/","page":"About","title":"About","text":"Add Standard Random Libray to your Project.tomlfile.","category":"page"},{"location":"integrations/","page":"About","title":"About","text":"using Lucky\nusing Rocket\nusing Random\nusing Dates\n\n# Generate random Ohlc of 5 minutes interval.\nperiod = Minute(5)\nohlcs = rand(Ohlc{DateTime}, period, 4)\n\n# Stream the Ohlcs\nsubscribe!(Rocket.from(ohlcs), logger())\nnothing # hide","category":"page"},{"location":"integrations/#TimeSeries","page":"About","title":"TimeSeries","text":"","category":"section"},{"location":"integrations/","page":"About","title":"About","text":"Add TimeSeries to your Project.toml file.","category":"page"},{"location":"instruments/cash/#cash","page":"Cash","title":"Cash","text":"","category":"section"},{"location":"instruments/cash/","page":"Cash","title":"Cash","text":"    Lucky.Cash","category":"page"},{"location":"instruments/cash/#Lucky.Cash","page":"Cash","title":"Lucky.Cash","text":"Cash\n\nInstrument representing Cash.\n\n\n\n\n\n","category":"type"},{"location":"instruments/instruments/#instruments","page":"About","title":"Instruments","text":"","category":"section"},{"location":"instruments/instruments/","page":"About","title":"About","text":"    Lucky.Instrument","category":"page"},{"location":"instruments/instruments/#Lucky.Instrument","page":"About","title":"Lucky.Instrument","text":"Instrument\n\nAbstract Instrument type.\n\nAn Instrument represents a contract that can be traded.\n\n\n\n\n\n","category":"type"},{"location":"instruments/stocks/#stock","page":"Stocks","title":"Stock","text":"","category":"section"},{"location":"instruments/stocks/","page":"Stocks","title":"Stocks","text":"    Lucky.Stock","category":"page"},{"location":"instruments/stocks/#Lucky.Stock","page":"Stocks","title":"Lucky.Stock","text":"Stock\n\nInstrument representing Stock.\n\n\n\n\n\n","category":"type"},{"location":"trades/#trades","page":"Trades","title":"Trades","text":"","category":"section"},{"location":"trades/","page":"Trades","title":"Trades","text":"    AbstractTrade","category":"page"},{"location":"trades/#Lucky.AbstractTrade","page":"Trades","title":"Lucky.AbstractTrade","text":"AbstractTrade\n\nAbstract Trade type.\n\nA Trade is an actual exchange of a given Instrument.\n\n\n\n\n\n","category":"type"},{"location":"positions/#positions","page":"Positions","title":"Positions","text":"","category":"section"},{"location":"operators/rolling/#rolling","page":"rolling","title":"rolling","text":"","category":"section"},{"location":"operators/rolling/","page":"rolling","title":"rolling","text":"    rolling","category":"page"},{"location":"operators/rolling/#Lucky.rolling","page":"rolling","title":"Lucky.rolling","text":"rolling(n::Int)\n\nReturns an array of the last `n` values received.\n\n\n\n\n\n","category":"function"},{"location":"operators/rolling/","page":"rolling","title":"rolling","text":"    using Lucky\n    using Rocket\n    source = from(1:5)\n    subscribe!(source |> rolling(3), logger())\n    nothing #hide","category":"page"},{"location":"ohlcs/#ohlcs","page":"Ohlc","title":"Ohlc","text":"","category":"section"},{"location":"ohlcs/","page":"Ohlc","title":"Ohlc","text":"    Ohlc","category":"page"},{"location":"ohlcs/#Lucky.Ohlc","page":"Ohlc","title":"Lucky.Ohlc","text":"Ohlc(open::Float64, high::Float64, low::Float64, close::Float64, timestamp::T) where {T}\n\nBar data with Open, High, Low, Close and a Timestamp.\n\n\n\n\n\n","category":"type"},{"location":"quotes/#quotes","page":"Quotes","title":"Quotes","text":"","category":"section"},{"location":"quotes/","page":"Quotes","title":"Quotes","text":"A Quote is a value offered or asked at which an Instrument can be traded.","category":"page"},{"location":"quotes/","page":"Quotes","title":"Quotes","text":"The most common use case is a PriceQuote but not all instruments quote on prices.","category":"page"},{"location":"quotes/","page":"Quotes","title":"Quotes","text":"Another Quote type is OhlcQuote which describes historical prices as if they were historical ranged quote streams.","category":"page"},{"location":"quotes/","page":"Quotes","title":"Quotes","text":"    Lucky.AbstractQuote\n    Lucky.Quote\n    Lucky.PriceQuote\n    Lucky.OhlcQuote","category":"page"},{"location":"quotes/#Lucky.AbstractQuote","page":"Quotes","title":"Lucky.AbstractQuote","text":"AbstractQuote\n\nAbstract Quote type.\n\n\n\n\n\n","category":"type"},{"location":"quotes/#Lucky.Quote","page":"Quotes","title":"Lucky.Quote","text":"Quote(instrument::Instrument, price::Q, stamp::D)\n\n\n\n\n\n","category":"function"},{"location":"quotes/#Lucky.PriceQuote","page":"Quotes","title":"Lucky.PriceQuote","text":"PriceQuote\n\nDescribes a Quote given by a price.    \n\n\n\n\n\n","category":"type"},{"location":"quotes/#Lucky.OhlcQuote","page":"Quotes","title":"Lucky.OhlcQuote","text":"OhlcQuote\n\nDescribes a Quote given by an Ohlc. Mostly used for backtesting.\n\n\n\n\n\n","category":"type"},{"location":"operators/#operators","page":"About","title":"Operators","text":"","category":"section"},{"location":"operators/#Principles","page":"About","title":"Principles","text":"","category":"section"},{"location":"operators/","page":"About","title":"About","text":"All indicators respect the following behaviors :","category":"page"},{"location":"operators/","page":"About","title":"About","text":"Produce an Output for each new Input.\nReturn data in the same type as Input types whenever possible.\nRespect requested fixed size windows for output.\nFill up missing output values with missing.","category":"page"},{"location":"orders/#orders","page":"Orders","title":"Orders","text":"","category":"section"},{"location":"orders/","page":"Orders","title":"Orders","text":"    Lucky.MarketOrder\n    Lucky.LimitOrder","category":"page"},{"location":"orders/#Lucky.MarketOrder","page":"Orders","title":"Lucky.MarketOrder","text":"MarketOrder\n\nStandard Data Type carrying inforamtion for a market order on an instrument for a given size.\n\n\n\n\n\n","category":"type"},{"location":"orders/#Lucky.LimitOrder","page":"Orders","title":"Lucky.LimitOrder","text":"LimitOrder\n\nStandard Data Type carrying inforamtion for a limit order on an instrument for a given size.\n\n\n\n\n\n","category":"type"},{"location":"units/currencies/#currencies","page":"Currencies","title":"Currencies","text":"","category":"section"},{"location":"units/currencies/","page":"Currencies","title":"Currencies","text":"    Currency","category":"page"},{"location":"units/currencies/#Lucky.Currency","page":"Currencies","title":"Lucky.Currency","text":"Currency\n\nA Currency is type of Unit. It should not be confused with Cash, which represents the amount of a certain Currency.\n\nCurrencies are implemented as a singelton.\n\nExamples\n\nc = Currency(:USD)\n\n# output\n\nUSD()\n\nSee also: Unit\n\n\n\n\n\n","category":"type"},{"location":"#Documentation-of-Lucky.jl","page":"Documentation of Lucky.jl","title":"Documentation of Lucky.jl","text":"","category":"section"},{"location":"","page":"Documentation of Lucky.jl","title":"Documentation of Lucky.jl","text":"Welcome to the documentation for Lucky.jl.","category":"page"},{"location":"","page":"Documentation of Lucky.jl","title":"Documentation of Lucky.jl","text":"(Image: )","category":"page"},{"location":"","page":"Documentation of Lucky.jl","title":"Documentation of Lucky.jl","text":"These documents are WIP until 1.0 release. Reach out on Github Discussions if you have questions or requests.","category":"page"},{"location":"#Table-of-Contents","page":"Documentation of Lucky.jl","title":"Table of Contents","text":"","category":"section"},{"location":"","page":"Documentation of Lucky.jl","title":"Documentation of Lucky.jl","text":"","category":"page"}]
}
